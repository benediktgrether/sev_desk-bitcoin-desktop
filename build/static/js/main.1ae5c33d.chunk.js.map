{"version":3,"sources":["components/Card/CardBitcoinDetails.js","components/Details/BitcoinDetails.js","components/Card/CardDashboard.js","components/Dashboard/Dashboard.js","components/Change/BitcoinChange.js","components/Layout/Menu.js","components/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["CardBitcoinDetails","getKey","this","props","id","className","name","value","Component","getData","console","log","BitcoinDetails","state","error","isLoaded","items","map","data","fetch","trade","then","res","json","result","setState","message","i","key","CardDashboard","getItem","symbol","buy","sell","Dashboard","Object","entries","item","BitcoinChange","path","text","withRouter","handleClick","history","push","onClick","bind","location","pathname","to","Layout","component","App","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.1ae5c33d.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class CardBitcoinDetails extends Component {\n  render() {\n    const { getKey } = this.props\n    if (getKey.id !== 6) {\n      return (\n        <div className=\"row\">\n          <div className=\"col-sm-6 card-bitcoindetails\">\n            <div className=\"\">{getKey.name}</div>\n          </div>\n          <div className=\"col-sm-6 card-bitcoindetails\">\n            <div className=\"\">{getKey.value}</div>\n          </div>\n        </div>\n      )\n    } else {\n      return null\n    }\n  }\n}","import React, { Component } from \"react\";\n\nimport CardBitcoinDetails from \"./../Card/CardBitcoinDetails\"\nconst URL = \"https://blockchain.info/q/\"\n\nconst getData = [{\n  \"id\": 0, \"name\": \"Marktkapitalisierung\", \"trade\": \"marketcap\", \"value\": \"\"\n}, {\n  \"id\": 1, \"name\": \"Anzahl aller Bitcoins im Umlauf\", \"trade\": \"totalbc\", \"value\": \"\"\n}, {\n  \"id\": 2, \"name\": \"Anzahl der Transaktionen in den letzten 24h\", \"trade\": \"24hrtransactioncount\", \"value\": \"\"\n}, {\n  \"id\": 3, \"name\": \"Anzahl der gesendeter Bitcoin in den letzten 24h\", \"trade\": \"24hrbtcsent\", \"value\": \"\"\n}, {\n  \"id\": 4, \"name\": \"Aktuelle Hahsrate\", \"trade\": \"hashrate\", \"value\": \"\"\n}, {\n  \"id\": 5, \"name\": \"Aktueller Schwierigkeitsgrad\", \"trade\": \"getdifficulty\", \"value\": \"\"\n}, {\n  \"id\": 6, \"name\": \"test\", \"trade\": \"getdifficulty\", \"value\": \"\"\n}]\n\nconsole.log(getData)\n\nexport default class BitcoinDetails extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: []\n    };\n  }\n  async componentDidMount() {\n    getData.map((data) => {\n      fetch(URL + data.trade)\n        .then(res => res.json())\n        .then(\n          (result) => {\n            this.setState({\n              isLoaded: true,\n              items: result\n            });\n            data.value = this.state.items\n          },\n          (error) => {\n            this.setState({\n              isLoaded: true,\n              error\n            });\n          }\n        )\n    })\n  }\n\n  render() {\n    const { error, isLoaded } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-sm-12\">\n              <div className=\"card\">\n                {getData.map((data, i) => (\n                  console.log(data, i),\n                  <CardBitcoinDetails key={i} getKey={getData[i]} />\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      )\n    }\n  }\n}\n","import React, { Component } from \"react\";\n\nexport default class CardDashboard extends Component {\n  render() {\n    const { getKey, getItem } = this.props\n    return (\n      <div className=\"card\">\n        <div className=\"row\">\n          <div className=\"card-item col-sm-4\">\n            <div className=\"item-title\">\n              {getKey}\n            </div>\n          </div>\n          <div className=\"card-item col-sm-4\">\n            <div className=\"item-trade\">Buy</div>\n            <div className=\"trade-value\">{getItem.symbol} {getItem.buy}</div>\n          </div>\n          <div className=\"card-item col-sm-4\">\n            <div className=\"item-trade\">Sell</div>\n            <div className=\"trade-value\">{getItem.symbol} {getItem.sell}</div>\n          </div>\n        </div>\n      </div>\n\n    );\n  }\n}","import React, { Component } from \"react\";\nimport Card from \"../Card/CardDashboard\";\n\n// API https://blockchain.info/ticker\n\nexport default class Dashboard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      items: {}\n    };\n  }\n\n\n\n  componentDidMount() {\n    fetch(\"https://blockchain.info/ticker\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            items: result\n          });\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          });\n        }\n      )\n  }\n\n  render() {\n    const { error, isLoaded, items } = this.state;\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n        <div className=\"container\">\n          <div className=\"row\">\n            {\n              Object.entries(items).map(([key, item], i) => (\n                <div key={i} className=\"col-sm-12\">\n                  < Card getKey={key} getItem={item} />\n                </div>\n              ))\n            }\n          </div>\n        </div>\n      );\n    }\n  }\n}\n","import React, { Component } from 'react'\n\nexport default class BitcoinChange extends Component {\n  render() {\n    return (\n      <div>\n        Bitcoin Change\n      </div>\n    )\n  }\n}\n","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\n\nconst items = [\n  {\n    path: \"/\",\n    text: \"Dashboard\"\n  },\n  {\n    path: \"/bitcoin-details\",\n    text: \"Bitcoin Details\"\n  },\n  {\n    path: \"/bitcoin-change\",\n    text: \"Bitcoin Umrechner\"\n  }\n];\n\nfunction Menu(props) {\n  function handleClick(path) {\n    props.history.push(path);\n  }\n  return (\n    <ul className='menu'>\n      {items.map(item => (\n        <li\n          key={item.path}\n          onClick={handleClick.bind(null, item.path)}\n          className={\n            props.location.pathname === item.path\n              ? \"menu-item menu-item-active\"\n              : \"menu-item\"\n          }>\n          <Link className='menu-link' to={item.path}>\n            {item.text}\n          </Link>\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nexport default withRouter(Menu);\n","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport BitcoinDetails from \"./../Details/BitcoinDetails\";\nimport Dashboard from \"./../Dashboard/Dashboard\";\nimport BitcoinChange from \"./../Change/BitcoinChange\"\nimport Menu from \"./Menu\";\n\nexport default function Layout() {\n  return (\n    <div className='container-fluid'>\n      <div className='row'>\n        <div className='col-sm-3'>\n          <div className='sidebar'>\n            <Menu />\n          </div>\n        </div>\n        <main className='col-sm-9'>\n          <div className='content'>\n            <Switch>\n              <Route path='/bitcoin-change' component={BitcoinChange} />\n              <Route path='/bitcoin-details' component={BitcoinDetails} />\n              <Route path='/' component={Dashboard} />\n            </Switch>\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport Layout from \"./components/Layout/Layout\";\nimport \"./css/main.css\";\n\nexport default function App() {\n  return (\n    <BrowserRouter>\n      <Layout />\n    </BrowserRouter>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}